{
  "name": "Jotfomr-agent-det-mvp",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        -115
      ],
      "id": "bba52ee1-400d-4a67-a1fb-f7b7d36fb736",
      "name": "When chat message received",
      "webhookId": "056eccce-8dec-4781-a6e8-6cb636e88396"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "messages": {
          "messageValues": [
            {
              "message": "You are a language detection system. Identify the language of the following message. Respond only with the name of the language in English. If uncertain, respond with \"Unknown\".. Your response format Json "
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        660,
        -115
      ],
      "id": "b397335d-46aa-4d52-929b-43ba5635718e",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        748,
        105
      ],
      "id": "48a18263-0deb-4550-b47b-078f1b3dab9a",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "13vKdqYd1ZdGPTtV",
          "name": "OpenAi-Jotform"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1036,
        -20
      ],
      "id": "b94e9970-1c72-42f3-ab16-4c2c65e8df56",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "13vKdqYd1ZdGPTtV",
          "name": "OpenAi-Jotform"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}",
        "contextWindowLength": 6
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1156,
        -20
      ],
      "id": "f4944e6f-0d54-417d-a924-81ab5dea243a",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "ai_agent_chat_messages",
          "mode": "list",
          "cachedResultName": "ai_agent_chat_messages"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $('When chat message received').item.json.sessionId }}",
            "content": "={{ $('When chat message received').item.json.chatInput }}",
            "sequence_number": "={{ $('Postgres1').item.json.sequence_number }}",
            "created_at": "={{ $now }}",
            "current_sentiment": "={{ $json.output.current_sentiment }}",
            "cumulative_sentiment": "={{ $json.output.cumulative_sentiment }}",
            "sentiment_confidence": "={{ $json.output.confidence }}",
            "sentiment_label": "={{ $json.output.sentiment_label.replace(' ', '_') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "uuid",
              "displayName": "uuid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "agent_id",
              "displayName": "agent_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message_type",
              "displayName": "message_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "sequence_number",
              "displayName": "sequence_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "current_sentiment",
              "displayName": "current_sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "cumulative_sentiment",
              "displayName": "cumulative_sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment_label",
              "displayName": "sentiment_label",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment_confidence",
              "displayName": "sentiment_confidence",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1822,
        -240
      ],
      "id": "4dece70c-e953-4959-9aee-54414d41b890",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "4waidkN2DwqnpRYF",
          "name": "Postgres-Jotform-Insight"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH filtered_messages AS (                        -- İlgili chat'e ait tüm satırlar\n    SELECT *\n    FROM v_ai_agent_all_messages\n    WHERE chat_id = '{{ $json.sessionId }}'\n),\n\nlast_msg AS (                                     -- Son mesaj (yoksa boş kalır)\n    SELECT *\n    FROM filtered_messages\n    ORDER BY sequence_number DESC NULLS LAST, created_at DESC\n    LIMIT 1\n),\n\nstats AS (                                        -- Kaç satır var?\n    SELECT COUNT(*)::integer AS total_rows\n    FROM filtered_messages\n)\n\nSELECT\n    stats.total_rows,                             \n    (stats.total_rows % 5) + 1      AS sequence_number,\n    COALESCE(last_msg.uuid::text,           '')  AS last_uuid,\n    COALESCE(last_msg.content,              '')  AS last_content,\n    COALESCE(last_msg.current_sentiment,  0.0)   AS last_sentiment,\n    COALESCE(last_msg.cumulative_sentiment,0.0)  AS prev_cumulative,\n    COALESCE(last_msg.overall_sentiment,   0.0)   AS overall_sentiment,\n    COALESCE(last_msg.trend_direction,     '')   AS trend_direction,\n    COALESCE(last_msg.positive_count,      0)    AS positive_count,\n    COALESCE(last_msg.negative_count,      0)    AS negative_count\nFROM stats\nLEFT JOIN last_msg ON TRUE;                       -- last_msg yoksa NULL → COALESCE",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        220,
        -115
      ],
      "id": "6da40bc6-6e57-4a20-bcc9-1127fbdf6960",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "4waidkN2DwqnpRYF",
          "name": "Postgres-Jotform-Insight"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.total_rows }}",
                    "rightValue": 0,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    },
                    "id": "1f0fc186-5688-4308-b429-1371aa357857"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "First"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3950dfe7-9837-437c-9d05-8ab8633c1d37",
                    "leftValue": "={{ $json.total_rows > 0 && $json.total_rows % 4 !== 0 }}",
                    "rightValue": 1,
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Continue"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "60ba0a78-4f30-41f7-b767-61030c683e4c",
                    "leftValue": "={{ $json.total_rows % 4 === 0 }}",
                    "rightValue": 4,
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Loop"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        440,
        -115
      ],
      "id": "59381e90-d26b-4266-816f-af00db93e3df",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Lütfen şu chat mesajını sentiment analizi yap:\n\nMesaj: \"{{ $('When chat message received').item.json.chatInput }}\"\nÖnceki kümülatif skor: {{ $json.cumulative_sentiment || 0 }}\nMesaj sayısı: {{ $json.messageNumber }}\n\nBu mesajın sentiment skorunu belirle ve kümülatif skoru güncelle. JSON formatında yanıtla.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "Sen bir sentiment analizi uzmanısın. Her chat mesajını analiz edip duygusal durumunu belirlemek zorundasın.\n\nGÖREVİN:\n- Gelen her chat mesajının sentiment skorunu -1 ile +1 arasında belirle\n- Kümülatif sentiment skorunu güncelle\n- Sonucu JSON formatında döndür\n\nÇIKTI FORMATI:\n{\n  \"current_sentiment\": 0.7,\n  \"cumulative_sentiment\": 0.45,\n  \"message_count\": 3,\n  \"sentiment_label\": \"pozitif\",\n  \"confidence\": 0.85\n}\n\nSENTIMENT KATEGORİLERİ:\n- Çok Negatif: -1.0 ile -0.6\n- Negatif: -0.6 ile -0.2  \n- Nötr: -0.2 ile +0.2\n- Pozitif: +0.2 ile +0.6\n- Çok Pozitif: +0.6 ile +1.0\n\nHer mesajı dikkatli analiz et ve duygusal ton, kelime seçimi, bağlam gibi faktörleri değerlendir.Çıktıları json formatında vermelisin "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1068,
        -240
      ],
      "id": "27b5239a-61d8-4ae0-bbce-acce2e22f454",
      "name": "AI Agent Mini"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1712,
        305
      ],
      "id": "ab8e2233-f75d-413a-9125-1c93271b7d46",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "13vKdqYd1ZdGPTtV",
          "name": "OpenAi-Jotform"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "4"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1832,
        305
      ],
      "id": "fb103050-b54a-474b-8588-2e5d91e9301f",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"current_sentiment\": 0.0,\n  \"cumulative_sentiment\": 0.0,\n  \"message_count\": 1,\n  \"sentiment_label\": \"çok_negatif\",\n  \"confidence\": 0.75\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1276,
        -17.5
      ],
      "id": "f106b2be-21de-4d69-8880-10394e21a6e0",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"session_id\": \"c146220d1cfe4aec860f0a06c386c83a\",\n  \"batch_number\": 5,\n  \"message_ids\": [\n    \"7eb33e39-45e2-4ec5-9b8e-eb475ffd5b0f\",\n    \"0048ae78-ed2d-49cf-aebf-cc8d0ba9aae4\",\n    \"640d66bf-96f2-4d52-92ba-7b43488dbda6\",\n    \"e2478d9e-7a54-4467-8761-b0ac84c40efc\"\n  ],\n  \"overall_sentiment\": 0.25,\n  \"trend_direction\": \"yükseliş\",\n  \"message_count\": 4,\n  \"positive_count\": 3,\n  \"negative_count\": 0,\n  \"neutral_count\": 1,\n  \"key_insights\": \"Mesajlar genel olarak olumlu bir eğilim göstermektedir.\",\n  \"recommendation\": \"Olumlu geri bildirimleri teşvik etmek için bu tonun korunması önerilir.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1960,
        300
      ],
      "id": "bff6cc3b-9243-4009-b804-a5c33dd827a4",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT uuid, content, current_sentiment\nFROM public.ai_agent_chat_messages\nWHERE chat_id = '{{ $('When chat message received').item.json.sessionId }}'\nORDER BY sequence_number DESC\nLIMIT 4;\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        738,
        385
      ],
      "id": "48c5e8d9-9a82-4d16-a56f-d9a8d29e3a61",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "4waidkN2DwqnpRYF",
          "name": "Postgres-Jotform-Insight"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Postgres'ten gelen satırlar\nconst rows = $items(\"Postgres3\", 0);   // veya hangi node'dan geliyorsa\n// Mesaj listesi\nconst messages = rows.map(r => r.json);\n// Boş gelmemesi gereken alanlar\nconst sessionId       = $('When chat message received').first().json.sessionId;        \nconst sequence_number     = $('Postgres1').first().json.sequence_number ; \nconst messageIds      = messages.map(m => m.uuid); \nconst messageSentiments = messages.map(m => parseFloat(m.current_sentiment)); // YENİ EKLEME\n\n// Mesajların tüm detaylarını içeren array\nconst messageDetails = messages.map(m => ({\n  id: m.uuid,\n  sentiment: parseFloat(m.current_sentiment),\n  content: m.content\n}));\n\nconst overallSent     = $('Postgres1').first().json.overall_sentiment;\nconst trend           = $('Postgres1').first().json.trend_direction;   \nconst msgCount        = $('Postgres1').first().json.total_rows + 1;    \nconst posCnt          = $('Postgres1').first().json.positive_count;    // → number\nconst negCnt          = $('Postgres1').first().json.negative_count;    // → number\nreturn [\n  {\n    json: {\n      session_id:       sessionId,\n      sequence_number:     sequence_number,\n      messages:         messageDetails,                    // TÜM MESAJ DETAYLARI\n      overall_sentiment:overallSent,\n      trend_direction:  trend,\n      message_count:    msgCount,\n      positive_count:   posCnt,\n      negative_count:   negCnt,\n      key_insights:     \"\",              // AIAgent dolduracak\n      recommendation:   \"\"               // AIAgent dolduracak\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1234,
        385
      ],
      "id": "f6da599b-b906-47a4-8455-c814454c6c21",
      "name": "Code"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "ai_agent_chat_summary",
          "mode": "list",
          "cachedResultName": "ai_agent_chat_summary"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "session_id": "={{ $json.output.session_id }}",
            "batch_number": "={{ $json.output.batch_number }}",
            "message_ids": "={{ $json.output.message_ids }}",
            "overall_sentiment": "={{ $json.output.overall_sentiment }}",
            "trend_direction": "={{ $json.output.trend_direction }}",
            "message_count": "={{ $json.output.message_count }}",
            "positive_count": "={{ $json.output.positive_count }}",
            "negative_count": "={{ $json.output.negative_count }}",
            "neutral_count": "={{ $json.output.neutral_count }}",
            "key_insights": "={{ $json.output.key_insights }}",
            "recommendation": "={{ $json.output.recommendation }}",
            "created_at": "={{ $now }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "batch_number",
              "displayName": "batch_number",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "message_ids",
              "displayName": "message_ids",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true
            },
            {
              "id": "overall_sentiment",
              "displayName": "overall_sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "trend_direction",
              "displayName": "trend_direction",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message_count",
              "displayName": "message_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "positive_count",
              "displayName": "positive_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "negative_count",
              "displayName": "negative_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "neutral_count",
              "displayName": "neutral_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "key_insights",
              "displayName": "key_insights",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "recommendation",
              "displayName": "recommendation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2212,
        185
      ],
      "id": "26642412-78f2-4bfe-a448-31e834b2e94d",
      "name": "Postgres4",
      "credentials": {
        "postgres": {
          "id": "4waidkN2DwqnpRYF",
          "name": "Postgres-Jotform-Insight"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1364,
        180
      ],
      "id": "766a03cd-cfd8-4291-bd46-69c444de74b1",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "13vKdqYd1ZdGPTtV",
          "name": "OpenAi-Jotform"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/recommend",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', ``, 'json') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1892,
        805
      ],
      "id": "2ffdfd00-3ef1-4386-9d08-0a3ae153393c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "3"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1772,
        805
      ],
      "id": "ced0d1ab-94b8-46dd-aaa5-8434e0241b43",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1652,
        805
      ],
      "id": "a0243c6d-bee5-4421-87f8-7051338a39bc",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "13vKdqYd1ZdGPTtV",
          "name": "OpenAi-Jotform"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Session ID : {{ $json.session_id }}\nBatch No   : {{ $json.sequence_number }}\n\nSon 4 mesaj (kronolojik):\n1. \"{{ $json.messages[3].content }}\"\n2. \"{{ $json.messages[2].content }}\"\n3. \"{{ $json.messages[1].content }}\"\n4. \"{{ $json.messages[0].content }}\"\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "## TOOL\nHTTP Request ⇒ POST http://127.0.0.1:8000/recommend\nSend JSON body exactly as:\n{\n  \"query\": \"<joined_messages>\",\n  \"score_threshold\": 0.4\n}\n\n## GÖREVİN\n1. User prompt’taki 4 mesajı zaman sırasıyla '\\n' ile birleştir → <joined_messages>.\n2. Yukarıdaki HTTP Request tool’unu şu parametrelerle AYNEN çağır:\n   {\n     \"url\": \"http://127.0.0.1:8000/recommend\",\n     \"method\": \"POST\",\n     \"headers\": { \"Content-Type\": \"application/json\" },\n     \"json\": {\n       \"query\": \"<joined_messages>\",\n       \"score_threshold\": 0.4\n     }\n   }\n3. response JSON’undan:\n     • recommended_agent_id  \n     • confidence_score  \n     • reason  \n     • alternative_agents\n   alanlarını al.\n4. Aşağıdaki tek-satırlık JSON’u üret **ve başka hiçbir şey yazma**:\n{\n  \"session_id\": \"{{ $json.session_id }}\",\n  \"batch_number\": {{ $json.sequence_number }},\n  \"recommended_agent_id\": \"<string>\",\n  \"confidence_score\": <number>,\n  \"reason\": \"<string>\",\n  \"alternative_agents\": [\"<string>\", \"...\"]\n}\n\n\n---\nIMPORTANT:\nWhen your reasoning is finished, call the tool \n`format_final_json_response` with the EXACT JSON object\n(instead of printing JSON directly).  \nExample:\n\n{ \"tool\": \"format_final_json_response\",\n  \"tool_input\": {\n    \"session_id\": \"abc\", \n    \"batch_number\": 1,\n    \"recommended_agent_id\": \"xyz\",\n    \"confidence_score\": 0.42,\n    \"reason\": \"…\",\n    \"alternative_agents\": [\"pqr\"]\n  }\n}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1744,
        585
      ],
      "id": "3a670c62-1b62-4ab3-a720-0e7112ab6af5",
      "name": "Agent-Detection"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Session ID: {{ $json.session_id }}\nBatch No : {{ $json.sequence_number }}\n\nMesajlar ve skorları:\n1. \"{{ $json.messages[3].id }}\" – Skor: {{ $json.messages[3].sentiment }}\n2. \"{{ $json.messages[2].id }}\" – Skor: {{ $json.messages[2].sentiment }}\n3. \"{{ $json.messages[1].id }}\" – Skor: {{ $json.messages[1].sentiment }}\n4. \"{{ $json.messages[0].id }}\" – Skor: {{ $json.messages[0].sentiment }}\n\n(Liste kronolojik olsun diye sondan başa döndürdük.)\n\nYukarıdaki kurallara göre analizi yap, **yalnızca** belirtilen JSON’u döndür. ",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Sen gelişmiş bir sentiment analizi uzmanısın. Her 4 mesajlık grup (batch) için kapsamlı duygu trendi çıkarırsın.\n\nGÖREV\n1. Aşağıda verilen 4 mesaj + skorlarını incele.\n2. Genel ortalama skoru (overall_sentiment) hesapla.\n3. Trend yönünü belirle:\n   - yükseliş  ⇒ son skor ortalamadan ≥ +0.05\n   - düşüş     ⇒ son skor ortalamadan ≤ -0.05\n   - kararlı   ⇒ |fark| < 0.05\n   - dalgalı   ⇒ skorlar zıt yönlerde büyük sapma gösteriyor\n4. JSON çıktısını **tam olarak** aşağıdaki şemada üret; başka metin ekleme.\n\nÖNEMLİ: Çıktını sadece geçerli JSON formatında ver. Başka hiçbir açıklama, markdown, veya ek metin ekleme!\n\nJSON FORMAT:\n{\n  \"session_id\": \"string\",\n  \"batch_number\": number,\n  \"message_ids\": [\"string1\", \"string2\"],\n  \"overall_sentiment\": number,\n  \"trend_direction\": \"string\",\n  \"message_count\": number,\n  \"positive_count\": number,\n  \"negative_count\": number,\n  \"neutral_count\": number,\n  \"key_insights\": \"string\",\n  \"recommendation\": \"string\"\n}\nNot: sentiment_label eşiklerin\n- çok_negatif (≤-0.6) / negatif / nötr / pozitif / çok_pozitif (≥+0.6) "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1740,
        80
      ],
      "id": "f7370b34-c5fc-4020-9118-3f89818d3b15",
      "name": "Sentiment-Detection"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"session_id\": \"string\",\n  \"batch_number\": 0,\n  \"recommended_agent_id\": \"string\",\n  \"confidence_score\": 0.0,\n  \"reason\": \"string\",\n  \"alternative_agents\": [\"string\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2012,
        805
      ],
      "id": "51f31d90-59d2-4b35-a581-effd6fbbc46a",
      "name": "Structured Output Parser2"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "AI Agent Mini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Mini",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent Mini",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent Mini",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Mini": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Sentiment-Detection",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Sentiment-Detection",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Mini",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Sentiment-Detection",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Postgres3": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Agent-Detection",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sentiment-Detection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "Agent-Detection",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Agent-Detection",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Agent-Detection",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Agent-Detection": {
      "main": [
        []
      ]
    },
    "Sentiment-Detection": {
      "main": [
        [
          {
            "node": "Postgres4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Agent-Detection",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "80ad7a71-ba57-4f57-81f7-8bf460b8f84f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "155a9a0b844016dbe3efee2d9ede1b30f9746081cbc43db7022113ad8ccf635c"
  },
  "id": "W4IMAOvupAd1Eg4i",
  "tags": []
}